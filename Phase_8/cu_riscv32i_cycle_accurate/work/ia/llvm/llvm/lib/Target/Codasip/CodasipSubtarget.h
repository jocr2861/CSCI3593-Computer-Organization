/**
 * Codasip s.r.o.
 *
 * CONFIDENTIAL
 *
 * Copyright 2022 Codasip s.r.o.
 *
 * All Rights Reserved.
 * This file is part of the Codasip Studio product. No part of the Studio product, including this
 * file, may be use, copied, modified, or distributed except in accordance with the terms contained
 * in Codasip license agreement under which you obtained this file.
 *
 * \file
 * \date    2022-11-20
 * \author  Codasip (c) C compiler backend generator
 * \version 9.1.1-1255
 * \brief   Source for compiler backend
 * \project cu_riscv32i_cycle_accurate.ia
 * \note          Codasip Studio version: 9.1.1-1255
 *                Licensee: Lockular Limited  (C60_2200_2176)
 *                Project: cu_riscv32i_cycle_accurate.ia
 *                Date: 2022-11-20 22:42:27
 *                Copyright (C) 2022 Codasip s.r.o.
 */


#ifndef CODASIPSUBTARGET_H
#define CODASIPSUBTARGET_H

#include "CodasipFrameLowering.h"
#include "CodasipISelLowering.h"
#include "CodasipInstrInfo.h"
#include "CodasipSelectionDAGInfo.h"
#include "llvm/CodeGen/TargetSubtargetInfo.h"
#include "llvm/Target/TargetMachine.h"
#include <memory>
#include <string>

#define GET_SUBTARGETINFO_ENUM
#define GET_SUBTARGETINFO_HEADER
#include "CodasipGenSubtargetInfo.inc"

namespace llvm {

class CodasipTargetMachine;

class CodasipSubtarget : public CodasipGenSubtargetInfo {
public:
  CodasipSubtarget(const Triple &TT, StringRef FS, CodasipTargetMachine &TM);
  ~CodasipSubtarget() override;
  // Generated by tblgen
  void ParseSubtargetFeatures(StringRef CPU, StringRef FS);
  bool enablePostRAScheduler() const override;
  CodeGenOpt::Level getOptLevelToEnablePostRAScheduler() const override {
    return CodeGenOpt::None;
  }
  // Access methods
  const TargetInstrInfo *getInstrInfo() const override { return &InstrInfo; }
  const CodasipFrameLowering *getFrameLowering() const override {
    return &FrameInfo;
  }
  const CodasipTargetLowering *getTargetLowering() const override {
    return TLInfo.get();
  }
  const TargetRegisterInfo *getRegisterInfo() const override {
    return &InstrInfo.getRegisterInfo();
  }
  const InstrItineraryData *getInstrItineraryData() const override {
    return &InstrItins;
  }
  const CodasipSelectionDAGInfo *getSelectionDAGInfo() const override {
    return &TSInfo;
  }
  bool useAA() const override { return true; }

  

private:
  // note: RI is in InstrInfo
  CodasipInstrInfo InstrInfo;
  CodasipFrameLowering FrameInfo;
  CodasipSelectionDAGInfo TSInfo;
  InstrItineraryData InstrItins;
  // do the same with TSInfo?
  std::unique_ptr<CodasipTargetLowering> TLInfo = nullptr;
  // not used but they have to be here
  bool HasStdExtC = false;
  bool EnableLinkerRelax = false;
};

} // namespace llvm

#endif
