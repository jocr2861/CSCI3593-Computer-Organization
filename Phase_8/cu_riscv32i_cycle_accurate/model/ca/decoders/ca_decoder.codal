/**
 * Codasip s.r.o.
 *
 * CONFIDENTIAL
 *
 * Copyright 2022 Codasip s.r.o.
 *
 * All Rights Reserved.
 *
 * NOTICE: All information contained in this file, is and shall remain the property of
 * Codasip s.r.o. and its suppliers, if any.
 *
 * The intellectual and technical concepts contained herein are confidential and proprietary to
 * Codasip s.r.o. and are protected by trade secret and copyright law.  In addition, elements of the
 * technical concepts may be patent pending.
 *
 * This file is part of the Codasip Studio product. No part of the Studio product, including this
 * file, may be use, copied, modified, or distributed except in accordance with the terms contained
 * in Codasip license agreement under which you obtained this file.
 *
 *  \file   ca_decoder.codal
 *  \author Codasip
 *  \date   09.02.2022
 *  \brief  cycle accurate model
 */

#include "ca_defines.hcodal"
#include "opcodes.hcodal"
#include "config.hcodal"
#include "common_enums.hcodal"

// -------------------------------------------------------------------------------------------------
// Decoder
// -------------------------------------------------------------------------------------------------

set inst_decode = i_hw_halt,
        i_hw_itype_alu;
set inst_decode += i_hw_rtype_alu;
set inst_decode += i_hw_rtype_shift;
set inst_decode += i_hw_btype_branches;
set inst_decode += i_hw_jtype_jlink;
set inst_decode += i_hw_itype_jlreg;
set inst_decode += i_hw_utype_ops;
set inst_decode += i_hw_itype_loads;
set inst_decode += i_hw_stype_store;

// -------------------------------------------------------------------------------------------------
// Halt instruction
// -------------------------------------------------------------------------------------------------

// This instruction has no operands.

element i_hw_halt
{
    use opc_halt as opc;

    assembly { opc };
    binary { opc };

    semantics
    {
        // Register file write enable
        s_id_regwrite = false;

        // Operations
        s_id_aluop = ALU_NOP;

        // Operand MUXes
        s_id_alusrc1 = DONT_CARE;
        s_id_alusrc2 = DONT_CARE;

        // IMMEDIATE MUX select lines
        s_id_imm_gen_sel = DONT_CARE;

        // Is this a branch instruction to take a branch if branch taken
        s_id_branch_inst = false;
        s_id_jump_inst = BRADD_ADDR;
        s_id_branchop = BRANCH_FALSE; //Never branch on a halt
        s_id_rfwtsel = WB_ALU; //We are not writing to the register file or memory, so this does not matter

        // Load / store control signals
        s_id_mem_ops = MEM_NOP;
        s_id_memread = false;

        // HALT Command
        s_id_halt = true;
    };
};

// -------------------------------------------------------------------------------------------------
// Immediate Arithmetic instructions
// -------------------------------------------------------------------------------------------------

element i_hw_itype_alu
{
    use opc_itype_alu as opc;

    assembly { opc };
    binary { opc };

    semantics
    {
        // Register file write enable
        s_id_regwrite = true;

        // This switch statement assigns the alu operation to be performed by this instruction
        switch (opc)
        {
            case ITYPE_ADDI:
                s_id_aluop = ALU_ADD;
                break;
            case ITYPE_SLTI:
                s_id_aluop = ALU_SLT;
                break;
            case ITYPE_SLTIU:
                s_id_aluop = ALU_SLTU;
                break;
            case ITYPE_XORI:
                s_id_aluop = ALU_XOR;
                break;
            case ITYPE_ORI:
                s_id_aluop = ALU_OR;
                break;
            case ITYPE_ANDI:
                s_id_aluop = ALU_AND;
                break;
            default:
                codasip_fatal(ALU_ERROR, "ALU Immediate Decoder case: %d\n", opc);
                break;
        };

        // Operand MUXes
        s_id_alusrc1 = ALU_SRC1_SEL_RF;
        s_id_alusrc2 = ALU_SRC2_SEL_IMM;

        // IMMEDIATE MUX select lines
        s_id_imm_gen_sel = ITYPE_IMM_SEL;

        // Is this a branch instruction to take a branch if branch taken
        s_id_branch_inst = false; //We are not branching
        s_id_jump_inst = BRADD_ADDR; //We are not jumping
        s_id_branchop = BRANCH_FALSE; //Never branch on a I-Type ALU operation
        s_id_rfwtsel = WB_ALU; //Use the ALU output for the alu_result

        // Load / store control signals
        s_id_mem_ops = MEM_NOP; //We are not doing anything to memory in an arithmetic operation
        s_id_memread = false; //We are not reading from memory in an arithmetic operation

        // HALT Command
        s_id_halt = false; //This is not a halt operation
    };
};

// -------------------------------------------------------------------------------------------------
// Arithmetic instructions
// -------------------------------------------------------------------------------------------------

element i_hw_rtype_alu
{
    use opc_rtype_alu as opc;

    assembly { opc };
    binary { opc };

    semantics
    {
        // Register file write enable
        s_id_regwrite = true;

        // This switch statement assigns the alu operation to be performed by this instruction
        switch (opc)
        {
            case(RTYPE_ADD):
                s_id_aluop = ALU_ADD;
                break;
            case(RTYPE_SUB):
                s_id_aluop = ALU_SUB;
                break;
            case(RTYPE_SLL):
                s_id_aluop = ALU_SLL;
                break;
            case(RTYPE_SLT):
                s_id_aluop = ALU_SLT;
                break;
            case(RTYPE_SLTU):
                s_id_aluop = ALU_SLTU;
                break;
            case(RTYPE_XOR):
                s_id_aluop = ALU_XOR;
                break;
            case(RTYPE_SRL):
                s_id_aluop = ALU_SRL;
                break;
            case(RTYPE_SRA):
                s_id_aluop = ALU_SRA;
                break;
            case(RTYPE_OR):
                s_id_aluop = ALU_OR;
                break;
            case(RTYPE_AND):
                s_id_aluop = ALU_AND;
                break;
            default:
                codasip_fatal(ALU_ERROR, "Rtype Decoder case: %d\n", opc);
                break;
        };

        // Operand MUXes
        s_id_alusrc1 = ALU_SRC1_SEL_RF; //src1 comes from the register file
        s_id_alusrc2 = ALU_SRC2_SEL_RF; //src2 comes from the register file AS WELL

        // IMMEDIATE MUX select lines
        s_id_imm_gen_sel = DONT_CARE; //RTYPE_IMM_SEL IS NOT A REAL MUX AND WE DO NOT NEED IMMEDIATE HERE...

        // Is this a branch instruction to take a branch if branch taken
        s_id_branch_inst = false; //We are not branching
        s_id_jump_inst = BRADD_ADDR; //We are not jumping
        s_id_branchop = BRANCH_FALSE; //Never branch on a R-Type ALU operation
        s_id_rfwtsel = WB_ALU; //Use the ALU output for the alu_result

        // Load / store control signals
        s_id_mem_ops = MEM_NOP; //We are not doing anything to memory in an arithmetic operation
        s_id_memread = false; //We are not reading from memory in an arithmetic operation

        // HALT Command
        s_id_halt = false; //This is not a halt operation
    };
};

// -------------------------------------------------------------------------------------------------
// Rtype Immediate shift instructions
// -------------------------------------------------------------------------------------------------

element i_hw_rtype_shift
{
    use opc_rtype_shift as opc;

    assembly { opc };
    binary { opc };

    semantics
    {
        // Register file write enable
        s_id_regwrite = true;

        // This switch statement assigns the alu operation to be performed by this instruction
        switch (opc)
        {
            case(RTYPE_SLLI):
                s_id_aluop = ALU_SLL;
                break;
            case(RTYPE_SRLI):
                s_id_aluop = ALU_SRL;
                break;
            case(RTYPE_SRAI):
                s_id_aluop = ALU_SRA;
                break;
            default:
                codasip_fatal(ALU_ERROR, "Rtype Decoder case: %d\n", opc);
                break;
        };

        // Operand MUXes
        s_id_alusrc1 = ALU_SRC1_SEL_RF; //src1 comes from the register file
        s_id_alusrc2 = ALU_SRC2_SEL_IMM; //src2 comes from the IMMEDIATE

        // IMMEDIATE MUX select lines
        s_id_imm_gen_sel = ITYPE_IMM_SEL; //RTYPE_IMM_SEL IS NOT A REAL MUX, SO USE THE ITYPE_IMM_SEL VALUE...

        // Is this a branch instruction to take a branch if branch taken
        s_id_branch_inst = false; //We are not branching
        s_id_jump_inst = BRADD_ADDR; //We are not jumping
        s_id_branchop = BRANCH_FALSE; //Never branch on a R-Type ALU immediate shift operation
        s_id_rfwtsel = WB_ALU; // Use the ALU output for the alu_result

        // Load / store control signals
        s_id_mem_ops = MEM_NOP; //We are not doing anything to memory in an arithmetic operation
        s_id_memread = false; //We are not reading from memory in an arithmetic operation

        // HALT Command
        s_id_halt = false; //This is not a halt operation
    };
};


// -------------------------------------------------------------------------------------------------
// Branch instructions
// -------------------------------------------------------------------------------------------------

element i_hw_btype_branches
{
    use opc_btype_branches as opc;

    assembly { opc };
    binary { opc };

    semantics
    {
        // Register file write enable
        s_id_regwrite = false;

        // Operand MUXes
        s_id_alusrc1 = ALU_SRC1_SEL_RF; //src1 comes from the register file
        s_id_alusrc2 = ALU_SRC2_SEL_RF; //src2 comes from the register file

        // IMMEDIATE MUX select lines
        s_id_imm_gen_sel = BTYPE_IMM_SEL; //Use the branch immediate type

        // Is this a branch instruction to take a branch if branch taken
        s_id_branch_inst = true; //This is a branch instruction
        s_id_jump_inst = BRADD_ADDR; //This is not a jump instruction, just use the PC+IMM value for target address
        s_id_rfwtsel = WB_ALU; //We are not writing to the register file or memory, so this doesn't matter
        // This switch statement assigns the branch operation to be performed by this instruction
        switch (opc)
        {
            case(BTYPE_BEQ):
                s_id_branchop = BRANCH_COND_TRUE; //Take branch if ALU output is zero
                s_id_aluop = ALU_SUB; //Perform a subtraction to determine the alu_zero value
                break;
            case(BTYPE_BNE):
                s_id_branchop = BRANCH_COND_FALSE; //Take branch if ALU output is NOT zero
                s_id_aluop = ALU_SUB; //Perform a subtraction to determine the alu_zero value
                break;
            case(BTYPE_BLT):
                s_id_branchop = BRANCH_COND_FALSE; //Take branch if ALU output is NOT zero
                s_id_aluop = ALU_SLT; //determine the alu_zero value
                break;
            case(BTYPE_BLTU):
                s_id_branchop = BRANCH_COND_FALSE; //Take branch if ALU output is NOT zero
                s_id_aluop = ALU_SLTU; //determine the alu_zero value
                break;
            case(BTYPE_BGE):
                s_id_branchop = BRANCH_COND_TRUE; //Take branch if ALU output is zero
                s_id_aluop = ALU_SLT; //determine the alu_zero value
                break;
            case(BTYPE_BGEU):
                s_id_branchop = BRANCH_COND_TRUE; //Take branch if ALU output is zero
                s_id_aluop = ALU_SLTU; //determine the alu_zero value
                break;
            default:
                codasip_fatal(ALU_ERROR, "Btype Decoder case: %d\n", opc);
                break;
        };

        // Load / store control signals
        s_id_mem_ops = MEM_NOP; //We are not doing anything with memory in a branch instruction
        s_id_memread = false; //We are not reading from memory in a branch instruction

        // HALT Command
        s_id_halt = false; //This is not a halt instruction
    };
};

// -------------------------------------------------------------------------------------------------
// LIU and AUIPC and LUI instructions
// -------------------------------------------------------------------------------------------------

element i_hw_utype_ops
{
    use opc_utype_ops as opc;

    assembly { opc };
    binary { opc };

    semantics
    {
        // Register file write enable
        s_id_regwrite = true; //Write to the register file

        s_id_aluop = ALU_ADD; //Add src1 (0 or PC) and src2(UIMM)

        // This switch statement assigns the src1 to be selected by this instruction
        switch (opc)
        {
            case(UTYPE_LUI):
                s_id_alusrc1 = ALU_SRC1_SEL_ZERO;
                break;
            case(UTYPE_AUIPC):
                s_id_alusrc1 = ALU_SRC1_SEL_PC;
                break;
            default:
                codasip_fatal(ALU_ERROR, "Utype Decoder case: %d\n", opc);
                break;
        };

        // Operand MUXes
        s_id_alusrc2 = ALU_SRC2_SEL_IMM; //Use the UIMM that is decoded down below for src2

        // IMMEDIATE MUX select lines
        s_id_imm_gen_sel = UTYPE_IMM_SEL; //Decode the IMM as the Upper Immediate

        // Is this a branch instruction to take a branch if branch taken
        s_id_branch_inst = BRADD_ADDR; //This is not a branch instruction
        s_id_jump_inst = false; //This is not a jump instruction
        s_id_branchop = BRANCH_FALSE; //Never take branch
        s_id_rfwtsel = WB_ALU; //Take the ALU output and NOT the PC+4 value for the value to write to the register file

        // Load / store control signals
        s_id_mem_ops = MEM_NOP; //We are not doing anything with memory in a LUI or AUIPC instruction
        s_id_memread = false; //We are not reading from memory in a LUI or AUIPC instruction

        // HALT Command
        s_id_halt = false; //This is not a halt instruction
    };
};

// -------------------------------------------------------------------------------------------------
// JAL instruction
// -------------------------------------------------------------------------------------------------

element i_hw_jtype_jlink
{
    use opc_jtype_jlink as opc;

    assembly { opc };
    binary { opc };

    semantics
    {
        // Register file write enable
        s_id_regwrite = true; //Write the PC+4 to the register file

        s_id_aluop = ALU_ADD; //Perform an addition (This value is completely unused, but is necessary for the program to run)

        // Operand MUXes
        s_id_alusrc1 = ALU_SRC1_SEL_RF; //src1 comes from the register file
        s_id_alusrc2 = ALU_SRC2_SEL_IMM; //src2 comes from the IMMEDIATE

        // IMMEDIATE MUX select lines
        s_id_imm_gen_sel = JTYPE_IMM_SEL; //This is a J-Type instruction

        // Is this a branch instruction to take a branch if branch taken
        s_id_branch_inst = true; //This is a "branch" instruction
        switch(opc) {
            case(JTYPE_JAL):
                s_id_jump_inst = BRADD_ADDR; //This is a jump, but we will use the PC+IMM value for the target address and NOT the alu output (AKA the register file)
                break;
            default:
                codasip_fatal(ALU_ERROR, "JTYPE_JAL Decoder case: %d\n", opc);
                break;
        }
        s_id_branchop = BRANCH_TRUE; //Always take branch
        s_id_rfwtsel = WB_PC; //Take the PC+4 value and not the ALU output for the value to write to the register file

        // Load / store control signals
        s_id_mem_ops = MEM_NOP; //We are not doing anything with memory in a jump instruction
        s_id_memread = false; //We are not reading from memory in a jump instruction

        // HALT Command
        s_id_halt = false; //This is not a halt instruction
    };
};

// -------------------------------------------------------------------------------------------------
// JALR instruction
// -------------------------------------------------------------------------------------------------
element i_hw_itype_jlreg
{
    use opc_itype_jlreg as opc;

    assembly { opc };
    binary { opc };

    semantics
    {
        // Register file write enable
        s_id_regwrite = true; //Write the PC+4 to the register file

        s_id_aluop = ALU_ADD; //Perform an addition to determine the target_address value as register+IMM

        // Operand MUXes
        s_id_alusrc1 = ALU_SRC1_SEL_RF; //src1 comes from the register file
        s_id_alusrc2 = ALU_SRC2_SEL_IMM; //src2 comes from the IMMEDIATE

        // IMMEDIATE MUX select lines
        s_id_imm_gen_sel = ITYPE_IMM_SEL; //This is actually a I-Type instruction

        // Is this a branch instruction to take a branch if branch taken
        s_id_branch_inst = false; //This is not a "branch" instruction
        switch(opc) {
            case(ITYPE_JALR):
                s_id_jump_inst = BRADD_ALU; //This is a jump, and we will use the value from the alu output (AKA the register file) for the target address
                break;
            default:
                codasip_fatal(ALU_ERROR, "ITYPE_JALR Decoder case: %d\n", opc);
                break;
        }
        s_id_branchop = BRANCH_TRUE; //Always take branch
        s_id_rfwtsel = WB_PC; //Take the PC+4 value for the value to write to the register file

        // Load / store control signals
        s_id_mem_ops = MEM_NOP; //We are not doing anything with memory in a jump instruction
        s_id_memread = false; //We are not reading from memory in a jump instruction

        // HALT Command
        s_id_halt = false; //This is not a halt instruction
    };
};

// -------------------------------------------------------------------------------------------------
// load instructions
// -------------------------------------------------------------------------------------------------

element i_hw_itype_loads
{
    use opc_itype_loads as opc; 

    assembly { opc };
    binary { opc };

    semantics
    {
        // Register file write enable
        s_id_regwrite = true; //We are writing to the register file

        // Assign the aluop opcode to perform the address calculation
        s_id_aluop = ALU_ADD; //Perform an ADD for all load/store functions (Instructions)

        // This switch statement assigns the alu operation to be performed by this instruction
        switch (opc)
        {
            case(ITYPE_LB):
                s_id_mem_ops = MEM_LB; //Perform a load byte
                break;
            case(ITYPE_LBU):
                s_id_mem_ops = MEM_LBU; //Perform a load byte (unsigned)
                break;
            case(ITYPE_LH):
                s_id_mem_ops = MEM_LH; //Perform a load half word
                break;
            case(ITYPE_LHU):
                s_id_mem_ops = MEM_LHU; //Perform a load half word (unsigned)
                break;
            case(ITYPE_LW):
                s_id_mem_ops = MEM_LW; //Perform a load word
                break;
            default:
                codasip_fatal(ALU_ERROR, "ITYPE Load Decoder case: %d\n", opc);
                break;
        };

        // Operand MUXes
        s_id_alusrc1 = ALU_SRC1_SEL_RF; //Store value into the register file
        s_id_alusrc2 = ALU_SRC2_SEL_IMM; //Use the immediate as the memory address to get the value from

        // IMMEDIATE MUX select lines
        s_id_imm_gen_sel = ITYPE_IMM_SEL;

        // Is this a branch instruction to take a branch if branch taken
        s_id_branch_inst = false; //This is not a branch
        s_id_jump_inst = BRADD_ALU; //This is not a jump, but use the value from the ALU output/register file for the target address (this is unused)
        s_id_branchop = BRANCH_FALSE; //NEVER take branch
        s_id_rfwtsel = WB_ALU; //Use the value from the ALU to write to the register file (even though it doesn't matter)

        // Load / store control signals
        s_id_memread = true; //We are reading from memory

        // HALT Command
        s_id_halt = false; //This is not a halt command
    };
};


// -------------------------------------------------------------------------------------------------
// store instructions
// -------------------------------------------------------------------------------------------------

element i_hw_stype_store
{
    use opc_stype_store as opc;

    assembly { opc };
    binary { opc };

    semantics
    {
        // Register file write enable
        s_id_regwrite = false; //We are not writing to the register file

        // Assign the aluop opcode to perform the address calculation
        s_id_aluop = ALU_ADD; //Perform an ADD for all load/store functions (Instructions)

        // This switch statement assigns the alu operation to be performed by this instruction
        switch (opc)
        {
            case(STYPE_SB):
                s_id_mem_ops = MEM_SB; //Perform a store byte
                break;
            case(STYPE_SH):
                s_id_mem_ops = MEM_SH; //Perform a store half word
                break;
            case(STYPE_SW):
                s_id_mem_ops = MEM_SW; //Perform a store word
                break;
            default:
                codasip_fatal(ALU_ERROR, "STYPE Store Decoder case: %d\n", opc);
                break;
        };

        // Operand MUXes
        s_id_alusrc1 = ALU_SRC1_SEL_RF; //Use the register file as the source of the value to be stored in memory
        s_id_alusrc2 = ALU_SRC2_SEL_IMM; //Use the immediate at the address in memory to store the value

        // IMMEDIATE MUX select lines
        s_id_imm_gen_sel = STYPE_IMM_SEL; //This is a s-type command

        // Is this a branch instruction to take a branch if branch taken
        s_id_branch_inst = false; //This is not branch instruction
        s_id_jump_inst = BRADD_ALU; //This is not a jump, but use the value from the ALU output/register file for the target address (this is unused)
        s_id_branchop = BRANCH_FALSE; //NEVER take branch
        s_id_rfwtsel = WB_ALU; //Use the value from the ALU to write to the register file (even though it doesn't matter)

        // Load / store control signals
        s_id_memread = false; //We are not reading from memory, only writing

        // HALT Command
        s_id_halt = false; //This is not a halt command
    };
};
