/**
 * Codasip s.r.o.
 *
 * CONFIDENTIAL
 *
 * Copyright 2022 Codasip s.r.o.
 *
 * All Rights Reserved.
 *
 * NOTICE: All information contained in this file, is and shall remain the property of
 * Codasip s.r.o. and its suppliers, if any.
 *
 * The intellectual and technical concepts contained herein are confidential and proprietary to
 * Codasip s.r.o. and are protected by trade secret and copyright law.  In addition, elements of the
 * technical concepts may be patent pending.
 *
 * This file is part of the Codasip Studio product. No part of the Studio product, including this
 * file, may be use, copied, modified, or distributed except in accordance with the terms contained
 * in Codasip license agreement under which you obtained this file.
 *
 *  \file   ca_pipe3_ex.codal
 *  \author Codasip
 *  \date   09.02.2022
 *  \brief  cycle accurate model
 */

#include "ca_defines.hcodal"
#include "debug.hcodal"

// -------------------------------------------------------------------------------------------------
// Execute Stage
// -------------------------------------------------------------------------------------------------
event ex : pipeline(pipe.EX)
{
    use alu_operate;
    use ex_output;

    semantics
    {
        //Data Hazard forwarding
        //SRC1
        if ((r_ex_rd == r_id_src1) && (r_ex_rd != 0) && (r_ex_regwrite == true)) { //If src1 of this instruction is the rd of the last instruction, and it is not a no-op
            s_ex_fwd1 = DHF_ME; //If the current instruction needs the last instruction's value, forward from memory
        } else if((r_mem_rd == r_id_src1) && (r_mem_rd != 0) && (r_mem_regwrite == true)) { //If src1 of this instruction is the rd of 2 instructions ago, and it is not a no-op
            s_ex_fwd1 = DHF_WB; //If the current instruction needs the instruction from 2 cycles ago's value, forward from writeback
        } else { //Otherwise, get the value from the register as normal
            s_ex_fwd1 = DHF_REG;
        }

        //SRC2
        if ((r_ex_rd == r_id_src2) && (r_ex_rd != 0) && (r_ex_regwrite == true)) { //If src2 of this instruction is the rd of the last instruction, and it is not a no-op
            s_ex_fwd2 = DHF_ME; //If the current instruction needs the last instruction's value, forward from memory
        } else if((r_mem_rd == r_id_src2) && (r_mem_rd != 0) && (r_mem_regwrite == true)) { //If src2 of this instruction is the rd of 2 instructions ago, and it is not a no-op
            s_ex_fwd2 = DHF_WB; //If the current instruction needs the instruction from 2 cycles ago's value, forward from writeback
        } else { //Otherwise, get the value from the register as normal
            s_ex_fwd2 = DHF_REG;
        }

        //Data forwarding MUX1
        switch(s_ex_fwd1) {
            case(DHF_REG):
                s_ex_src1_val = r_id_rf_src1; //If we are not bypassing, send the register file value to the src1 select MUX
                break;
            case(DHF_ME):
                s_ex_src1_val = r_ex_alu_result; //If we are bypassing from after EX (before the MEM stage), send the last alu output value to the src1 select MUX
                break;
            case(DHF_WB):
                s_ex_src1_val = r_mem_alu_result;  //If we are bypassing from after MEM (before the WB stage), send the mem alu output value to the src1 select MUX
                break;
            default:
                codasip_fatal(ALU_ERROR, "Data Forwarding Src1 Select Mux case: %d\n", s_ex_fwd1);
                break;
        }

        //Data forwarding MUX2
        switch(s_ex_fwd2) {
            case(DHF_REG):
                s_ex_src2_val = r_id_rf_src2; //If we are not bypassing, send the register file value to the src2 select MUX
                break;
            case(DHF_ME):
                s_ex_src2_val = r_ex_alu_result; //If we are bypassing from after EX (before the MEM stage), send the last alu output value to the src2 select MUX
                break;
            case(DHF_WB):
                s_ex_src2_val = r_mem_alu_result;  //If we are bypassing from after MEM (before the WB stage), send the mem alu output value to the src2 select MUX
                break;
            default:
                codasip_fatal(ALU_ERROR, "Data Forwarding Src1 Select Mux case: %d\n", s_ex_fwd2);
                break;
        }


        // Develop a multiplexer for the ALU src1 operand using a switch statement using the src1_sl
        // control signal provided by the ID pipeline register generated by the Instruction decoder
        // Hint:  Using the standard naming protocols for this project, what prefix would you add to
        // to src1_sl to build the complete name of input value for this switch statement?
        //
        // In Assignment 5, there is only one input which is the src1 register file, rf, value and
        // this input is from the ID pipeline register
        switch(r_id_src1_sl) {
            case ALU_SRC1_SEL_RF:
                s_ex_src1_operand = s_ex_src1_val; //get the value after the forwarding/bypass mux1
                break;
            case ALU_SRC1_SEL_PC:
                s_ex_src1_operand = r_id_pc; //get the pc value
                break;
            case ALU_SRC1_SEL_ZERO:
                s_ex_src1_operand = 0; //Use 0 as the src1 operand
                break;
            default:
                codasip_fatal(ALU_ERROR, "ALU Src1 Select Mux case: %d\n", r_id_src1_sl);
                break;
        }



        // Develop a multiplexer for the ALU src1 operand using a switch statement using the src1_s2
        // control signal provided by the ID pipeline register generated by the Instruction decoder
        // Hint:  Using the standard naming protocols for this project, what prefix would you add to
        // to src1_sl to build the complete name of input value for this switch statement?
        //
        // In Assignment 5, there are two inputs to the source 2 operand mux, the src2 register, rf, value
        // and the immediate value.  Both of these inputs are from the ID pipeline register
        switch(r_id_src2_sl) {
            case ALU_SRC2_SEL_RF:
                s_ex_src2_operand = s_ex_src2_val; //get the value after the bypass mux2
                break;
            case ALU_SRC2_SEL_IMM:
                s_ex_src2_operand = r_id_src2_imm; //Take the immediate value straight from the last stage
                break;
            default:
                codasip_fatal(ALU_ERROR, "ALU Src2 Select Mux case: %d\n", r_id_src2_sl);
                break;
        }


        // HALT instruction detection used for simulation purposes until the load/store instructions
        // have been implemented
        if (r_id_halt == true)
        {
            codasip_info(INFO_GENERAL, "Halt instruction indicated");
//            codasip_store_exit_code(rf_xpr[GPR_RETVAL] & 0xFF);
            #pragma simulator
            {
                codasip_halt();
            }

        }

        // If not a halt operation, call ALU routine
        alu_operate();






        // Update the pipeline registers between the Execute (EX) and MEMORY (MEM) stages
        ex_output();
    };
};

event alu_operate : pipeline(pipe.EX)
{
    semantics
    {
        // A switch statement will be used to determine and evaluate the ALU operation using
        // the aluop code provided by the ID pipeline register whose value is determined
        // by the instruction decoder.
        //
        // Hint:  Using the standard naming protocols for this project, what prefix would you add to
        // to aluop to build the complete name of input from ID pipeline register for this switch
        // statement?
        //
        // The value to assign in the case statements was added to ca_resources.codal earlier in
        // assignment 5
        switch(r_id_aluop) {
            case(ALU_NOP):
                s_ex_alu_output = (int32)0; //IS THIS WHAT A NOP SHOULD DO?
                break;
            case(ALU_ADD):
                s_ex_alu_output = (int32)(s_ex_src1_operand + s_ex_src2_operand); //result = src1 + scr2
                break;
            case(ALU_SUB):
                s_ex_alu_output = (int32)(s_ex_src1_operand - s_ex_src2_operand); //result = src1 - src2
                break;
            case(ALU_SLL):
                s_ex_alu_output = (int32)((uint32)s_ex_src1_operand << (uint5)s_ex_src2_operand); //result = src1 << src2 (uint5 - to make sure that we don't go more than 32 bits)
                break;
            case(ALU_SLT):
                s_ex_alu_output = (int32)(((int32)s_ex_src1_operand < (int32)s_ex_src2_operand) ? true : false); //Set result true if src1 < src2, otherwise set result false
                break;
            case(ALU_SLTU):
                s_ex_alu_output = (int32)(((uint32)s_ex_src1_operand < (uint32)s_ex_src2_operand) ? true : false); //(Unsigned comparison) Set result true if src1 < src2, otherwise set result false
                break;
            case(ALU_XOR):
                s_ex_alu_output = (uint32)((uint32)s_ex_src1_operand ^ (uint32)s_ex_src2_operand); //(Unsigned comparison) result = src1 ^(XOR) src2
                break;
            case(ALU_SRL):
                s_ex_alu_output = (int32)((uint32)s_ex_src1_operand >> (uint5)s_ex_src2_operand); //result = src1(Unsigned) >> src2 (uint5 - to make sure that we don't go more than 32 bits)
                break;
            case(ALU_SRA):
                s_ex_alu_output = (int32)((int32)s_ex_src1_operand >> (uint5)s_ex_src2_operand); //result = src1(SIGNED) >> src2 (uint5 - to make sure that we don't go more than 32 bits)
                break;
            case(ALU_OR):
                s_ex_alu_output = (uint32)((uint32)s_ex_src1_operand | (uint32)s_ex_src2_operand); //(Unsigned comparison) result = src1 | src2
                break;
            case(ALU_AND):
                s_ex_alu_output = (uint32)((uint32)s_ex_src1_operand & (uint32)s_ex_src2_operand); //(Unsigned comparison) result = src1 & src2
                break;
            default:
                codasip_fatal(ALU_ERROR, "ALU Output Select Mux case: %d\n", r_id_aluop);
                break;
        }

        //TEST THIS OUT...
        // s_ex_pc_imm_target_address = r_id_pc + r_id_src2_imm; //This is PC+IMM
        // s_ex_pc_4 = r_id_pc + 4; //This is PC+4

        //Multiplexor to decide branch target address
        switch(r_id_jump_inst) {
            case(BRADD_ADDR):
                s_ex_target_address = r_id_pc + r_id_src2_imm;
                break;
            case(BRADD_ALU):
                s_ex_target_address = s_ex_alu_output;
                break;
            default:
                codasip_fatal(ALU_ERROR, "Target Address Select Mux case: %d\n", r_id_jump_inst);
                break;
        }
        
        //Calculate if the alu output a zero or not
        if (s_ex_alu_output == 0) {
            s_ex_alu_zero = 1;
        } else {
            s_ex_alu_zero = 0;
        }

        //Multiplexor to decide alu_result
        switch(r_id_rfwtsel) {
            case(WB_ALU):
                s_ex_alu_result = s_ex_alu_output;
                break;
            case(WB_PC):
                s_ex_alu_result = r_id_pc + 4;
                break;
            default:
                codasip_fatal(ALU_ERROR, "ALU Result Select Mux case: %d\n", r_id_jump_inst);
                break;
        }
    };
};


event ex_output : pipeline(pipe.EX)
{
    semantics
    {
        // Store the ALU result to the EX pipeline register
        // Use the pipeline register that you created earlier in Assignment 5 to pass the output
        // signal from the ALU switch statement from the alu_operate event
        r_ex_target_address = s_ex_target_address;
        r_ex_alu_result = s_ex_alu_result;
        r_ex_alu_zero = s_ex_alu_zero;

        // Passing control signals to the next stage, MEM, through the EX pipeline register.  These
        // instruction decoder signals are being passed from the ID pipeline to the EX pipeline.
        //
        // Assign the proper ID pipeline register to the following EX pipeline registers.
        r_ex_rd             = r_id_rd;
        r_ex_regwrite       = r_id_regwrite;

        // Passing Decoder control-signals to the EX stage
        r_ex_branchop = r_id_branchop;
        r_ex_branch_inst = r_id_branch_inst;
        r_ex_jump_inst = r_id_jump_inst;
        r_ex_mem_ops = r_id_mem_ops;
        r_ex_memread = r_id_memread;
    };
};

