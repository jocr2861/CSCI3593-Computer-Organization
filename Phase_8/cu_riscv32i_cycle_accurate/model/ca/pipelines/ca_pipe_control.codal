/**
 * Codasip s.r.o.
 *
 * CONFIDENTIAL
 *
 * Copyright 2022 Codasip s.r.o.
 *
 * All Rights Reserved.
 *
 * NOTICE: All information contained in this file, is and shall remain the property of
 * Codasip s.r.o. and its suppliers, if any.
 *
 * The intellectual and technical concepts contained herein are confidential and proprietary to
 * Codasip s.r.o. and are protected by trade secret and copyright law.  In addition, elements of the
 * technical concepts may be patent pending.
 *
 * This file is part of the Codasip Studio product. No part of the Studio product, including this
 * file, may be use, copied, modified, or distributed except in accordance with the terms contained
 * in Codasip license agreement under which you obtained this file.
 *
 *  \file   ca_pipe_control.codal
 *  \author Codasip
 *  \date   09.02.2022
 *  \brief  cycle accurate model
 */

#include "debug.hcodal"
#include "ca_defines.hcodal"

event pipeline_control : pipeline(pipe.MEM)
{
    semantics
    {
        if (s_me_take_branch) {
            pipe.ID.clear(); //Clear the ID stage pipeline, turning it into a NOP
            pipe.EX.clear(); //Clear the EX stage pipeline, turning it into a NOP
            //Do not clear the MEM, since we need this to complete the branch (perform the WB into the register file)
            r_id_buffer_full = false; //Tell the ID stage that we are NOT stalling
        } else if (s_me_mem_busy) { //If memory is not ready yet, stall all stages (except for the memory stage, let it process again)
            pipe.IF.stall();
            pipe.ID.stall();
            pipe.EX.stall();
            // pipe.WB.stall();
            r_id_buffer_full = true; //Tell the ID stage that we are stalling and on the next cycle it should reuse the same instruction
        } else if (s_id_loadhaz) { //If there is a load data hazard, stall IF/ID and insert NOPs to let the other stages complete their operations
            pipe.IF.stall();
            pipe.ID.stall();
            r_id_buffer_full = true; //Tell the ID stage that we are stalling and on the next cycle it should reuse the same instruction
        } else {
            //Do nothing, CODAL handles it as normal
            r_id_buffer_full = false; //Tell the ID stage that we are NOT stalling
        }
    };
};