/**
 * Codasip s.r.o.
 *
 * CONFIDENTIAL
 *
 * Copyright 2022 Codasip s.r.o.
 *
 * All Rights Reserved.
 *
 * NOTICE: All information contained in this file, is and shall remain the property of
 * Codasip s.r.o. and its suppliers, if any.
 *
 * The intellectual and technical concepts contained herein are confidential and proprietary to
 * Codasip s.r.o. and are protected by trade secret and copyright law.  In addition, elements of the
 * technical concepts may be patent pending.
 *
 * This file is part of the Codasip Studio product. No part of the Studio product, including this
 * file, may be use, copied, modified, or distributed except in accordance with the terms contained
 * in Codasip license agreement under which you obtained this file.
 *
 *  \file   ca_pipe4_me.codal
 *  \author Codasip
 *  \date   09.02.2022
 *  \brief  cycle accurate model
 */

#include "ca_defines.hcodal"
#include "config.hcodal"

// -------------------------------------------------------------------------------------------------
// Memory Stage
// -------------------------------------------------------------------------------------------------
event me : pipeline(pipe.MEM)
{
    use branch_logic;
    use me_output;

    semantics
    {

        // Update the pipeline registers between the Memory (MEM) and Write Back (WB) stages
        branch_logic();
        me_output();
    };
};

event branch_logic : pipeline(pipe.MEM) 
{ 
    semantics
    {
        switch(r_ex_branchop) {
            case(BRANCH_TRUE):
                s_me_take_branch = 1; //Always take branch
                break;
            case(BRANCH_FALSE):
                s_me_take_branch = 1; //Never take branch
                break;
            case(BRANCH_COND_TRUE):
                s_me_take_branch = r_ex_alu_zero; //Take branch if the ALU output is zero
                break;
            case(BRANCH_COND_FALSE):
                s_me_take_branch = !r_ex_alu_zero; //Take branch if the ALU outputs anything except zero
                break;
            default:
                codasip_fatal(ALU_ERROR, "Take Branch AND Comparator case: %d\n", r_ex_branchop);
                break;
        }
    };
};

event me_output : pipeline(pipe.MEM)
{
    semantics
    {
        // ALU result from the EX pipeline register to pass along to the WB stage
        r_mem_alu_result = r_ex_alu_result;


        // Passing control signals to the next stage, WB, through the MEM pipeline register
        r_mem_rd          = r_ex_rd;
        r_mem_regwrite    = r_ex_regwrite;
    };
};
