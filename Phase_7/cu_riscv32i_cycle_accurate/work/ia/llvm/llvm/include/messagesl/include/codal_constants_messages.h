#ifndef ERR_CODAL_CONSTANTS_H_
#define ERR_CODAL_CONSTANTS_H_

#include "formatl/format_number.h"
#include "common/codasip_integer.h"
#include "utility/enumutils.h"
#include "utility/location.h"
#include "codal_constants_enum.h"

namespace codasip {

CODASIP_ENUM_CLASS_STR_DEFAULT(ModelType, MODEL_TYPE_UNDEF,
    (MODEL_TYPE_UNDEF = 0, "UNDEF"),
    (MODEL_TYPE_IA = 1, "ia"),
    (MODEL_TYPE_CA = 2, "ca"));

CODASIP_ENUM_CLASS_STR_DEFAULT(RegisterSpecifier, REGISTER_SPECIFIER_COMMON,
    (REGISTER_SPECIFIER_COMMON = 0, "common"),
    (REGISTER_SPECIFIER_PIPELINE = 1, "pipeline"),
    (REGISTER_SPECIFIER_PC = 2, "pc"),
    (REGISTER_SPECIFIER_ARCH = 3, "arch"),
    (REGISTER_SPECIFIER_ALIAS = 4, "alias"),
    (REGISTER_SPECIFIER_INNER = 5, "inner"));

CODASIP_ENUM_CLASS_STR_DEFAULT(PortDirection, PORT_DIRECTION_UNDEF,
    (PORT_DIRECTION_UNDEF = 0, "UNDEF"),
    (PORT_DIRECTION_IN = 1, "IN"),
    (PORT_DIRECTION_OUT = 2, "OUT"),
    (PORT_DIRECTION_INOUT = 3, "INOUT"));

CODASIP_ENUM_CLASS_STR_DEFAULT(PortType, PORT_TYPE_UNDEF,
    (PORT_TYPE_UNDEF = 0, "UNDEF"),
    (PORT_TYPE_DATA = 1, "DATA"),
    (PORT_TYPE_CONTROL = 2, "CONTROL"),
    (PORT_TYPE_INTERRUPT = 3, "INTERRUPT"));

CODASIP_ENUM_CLASS_STR_DEFAULT(Endianness, ENDIANNESS_UNDEF,
    (ENDIANNESS_UNDEF = 0, "UNDEF"),
    (ENDIANNESS_LITTLE = 1, "LITTLE"),
    (ENDIANNESS_BIG = 2, "BIG"));

CODASIP_ENUM_CLASS_STR(BusType,
    (BUS_TYPE_AHB3_LITE = 0, "AHB3_LITE"),
    (BUS_TYPE_AXI4_LITE = 1, "AXI4_LITE"),
    (BUS_TYPE_AXI4 = 2, "AXI4"),
    (BUS_TYPE_CPB = 3, "CPB"),
    (BUS_TYPE_CPB_LITE = 4, "CPB_LITE"));

CODASIP_ENUM_CLASS_STR_DEFAULT(BusRole, BUS_ROLE_UNDEF,
    (BUS_ROLE_UNDEF = 0, "UNDEF"),
    (BUS_ROLE_MASTER = 1, "MASTER"),
    (BUS_ROLE_SLAVE = 2, "SLAVE"),
    (BUS_ROLE_MIRRORED_MASTER = 3, "MIRRORED_MASTER"),
    (BUS_ROLE_MIRRORED_SLAVE = 4, "MIRRORED_SLAVE"));

CODASIP_ENUM_CLASS_STR_DEFAULT(Flag, FLAG_UNDEF,
    (FLAG_UNDEF = 0, "UNDEF"),
    (FLAG_R = 1, "R"),
    (FLAG_W = 2, "W"),
    (FLAG_RW = 3, "RW"));

CODASIP_ENUM_CLASS_STR_DEFAULT(AddressSpaceType, ADDRESS_SPACE_UNDEF,
    (ADDRESS_SPACE_UNDEF = 0, "UNDEF"),
    (ADDRESS_SPACE_ALL = 1, "ALL"),
    (ADDRESS_SPACE_PROGRAM = 2, "PROGRAM"),
    (ADDRESS_SPACE_DATA = 3, "DATA"));

CODASIP_ENUM_CLASS_STR_DEFAULT(ResourceAccessType, RESOURCE_ACCESS_UNDEF,
    (RESOURCE_ACCESS_BEGIN = 0, "BEGIN"),
    (RESOURCE_ACCESS_UNDEF = 0, "UNDEF"),
    (RESOURCE_ACCESS_READ = 1, "read"),
    (RESOURCE_ACCESS_EXTRACT = 2, "extract"),
    (RESOURCE_ACCESS_DREAD = 3, "dread"),
    (RESOURCE_ACCESS_WRITE = 4, "write"),
    (RESOURCE_ACCESS_INSERT = 5, "insert"),
    (RESOURCE_ACCESS_DWRITE = 6, "dwrite"),
    (RESOURCE_ACCESS_BLOCKING = 7, "blocking"),
    (RESOURCE_ACCESS_STALL = 8, "stall"),
    (RESOURCE_ACCESS_CLEAR = 9, "clear"),
    (RESOURCE_ACCESS_GATED = 10, "gated"),
    (RESOURCE_ACCESS_LOAD = 11, "load"),
    (RESOURCE_ACCESS_CLOCK_CYCLE = 12, "clock_cycle"),
    (RESOURCE_ACCESS_STAT = 13, "stat"),
    (RESOURCE_ACCESS_RESET = 14, "reset"),
    (RESOURCE_ACCESS_DUMP = 15, "dump"),
    (RESOURCE_ACCESS_TRANSPORT = 16, "transport"),
    (RESOURCE_ACCESS_ENCODE_DATA = 17, "encode_data"),
    (RESOURCE_ACCESS_DECODE_DATA = 18, "decode_data"),
    (RESOURCE_ACCESS_ENCODE_WSTRB = 19, "encode_wstrb"),
    (RESOURCE_ACCESS_END = 20, "END"));

CODASIP_ENUM_CLASS_STR_DEFAULT(ResourceCallbackType, RESOURCE_CALLBACK_UNDEF,
    (RESOURCE_CALLBACK_BEGIN = 0, "BEGIN"),
    (RESOURCE_CALLBACK_UNDEF = 0, "UNDEF"),
    (RESOURCE_CALLBACK_WRITE = 1, "write_cb"),
    (RESOURCE_CALLBACK_DWRITE = 2, "dwrite_cb"),
    (RESOURCE_CALLBACK_BLOCKING = 3, "blocking_cb"),
    (RESOURCE_CALLBACK_TRANSPORT = 4, "transport_cb"),
    (RESOURCE_CALLBACK_END = 5, "END"));

CODASIP_ENUM_CLASS_STR(TransportPhase,
    (CP_PHS_ADDRESS = 0, "CP_PHS_ADDRESS"),
    (CP_PHS_DATA = 1, "CP_PHS_DATA"),
    (CP_PHS_DATA_READ = 2, "CP_PHS_DATA_READ"),
    (CP_PHS_DATA_WRITE = 3, "CP_PHS_DATA_WRITE"),
    (CP_PHS_ADDRESS_READ = 4, "CP_PHS_ADDRESS_READ"),
    (CP_PHS_ADDRESS_WRITE = 5, "CP_PHS_ADDRESS_WRITE"),
    (CP_PHS_RESPONSE_WRITE = 6, "CP_PHS_RESPONSE_WRITE"));

CODASIP_ENUM_CLASS_STR(CommandCode,
    (CP_CMD_NONE = 0, "CP_CMD_NONE"),
    (CP_CMD_READ = 2, "CP_CMD_READ"),
    (CP_CMD_WRITE = 3, "CP_CMD_WRITE"),
    (CP_CMD_DREAD = 130, "CP_CMD_DREAD"),
    (CP_CMD_DWRITE = 131, "CP_CMD_DWRITE"),
    (CP_CMD_LOAD = 195, "CP_CMD_LOAD"));

CODASIP_ENUM_CLASS_STR(AHBTransCode,
    (CP_AHB_IDLE = 0, "CP_AHB_IDLE"),
    (CP_AHB_BUSY = 1, "CP_AHB_BUSY"),
    (CP_AHB_NONSEQ = 2, "CP_AHB_NONSEQ"),
    (CP_AHB_SEQ = 3, "CP_AHB_SEQ"));

CODASIP_ENUM_CLASS_STR(AHBReadyCode,
    (CP_AHB_READY = 1, "CP_AHB_READY"),
    (CP_AHB_WAIT = 0, "CP_AHB_WAIT"));

CODASIP_ENUM_CLASS_STR(AHBResponseCode,
    (CP_AHB_OKAY = 0, "CP_AHB_OKAY"),
    (CP_AHB_ERROR = 1, "CP_AHB_ERROR"));

CODASIP_ENUM_CLASS_STR(AHBSizeCode,
    (CP_AHB_SIZE_8 = 0, "CP_AHB_SIZE_8"),
    (CP_AHB_SIZE_16 = 1, "CP_AHB_SIZE_16"),
    (CP_AHB_SIZE_32 = 2, "CP_AHB_SIZE_32"),
    (CP_AHB_SIZE_64 = 3, "CP_AHB_SIZE_64"),
    (CP_AHB_SIZE_128 = 4, "CP_AHB_SIZE_128"),
    (CP_AHB_SIZE_256 = 5, "CP_AHB_SIZE_256"),
    (CP_AHB_SIZE_512 = 6, "CP_AHB_SIZE_512"),
    (CP_AHB_SIZE_1024 = 7, "CP_AHB_SIZE_1024"));

CODASIP_ENUM_CLASS_STR(AHBBurstCode,
    (CP_AHB_SINGLE = 0, "CP_AHB_SINGLE"),
    (CP_AHB_INCR = 1, "CP_AHB_INCR"),
    (CP_AHB_WRAP4 = 2, "CP_AHB_WRAP4"),
    (CP_AHB_INCR4 = 3, "CP_AHB_INCR4"),
    (CP_AHB_WRAP8 = 4, "CP_AHB_WRAP8"),
    (CP_AHB_INCR8 = 5, "CP_AHB_INCR8"),
    (CP_AHB_WRAP16 = 6, "CP_AHB_WRAP16"),
    (CP_AHB_INCR16 = 7, "CP_AHB_INCR16"));

CODASIP_ENUM_CLASS_STR(AHBReadWriteCode,
    (CP_AHB_READ = 0, "CP_AHB_READ"),
    (CP_AHB_WRITE = 1, "CP_AHB_WRITE"));

CODASIP_ENUM_CLASS_STR(AHBMastLockCode,
    (CP_AHB_UNLOCK = 0, "CP_AHB_UNLOCK"),
    (CP_AHB_LOCK = 1, "CP_AHB_LOCK"));

CODASIP_ENUM_CLASS_STR(AHBProtCode,
    (CP_AHB_DATA_ACCESS = 1, "CP_AHB_DATA_ACCESS"),
    (CP_AHB_PRIVILEGED = 2, "CP_AHB_PRIVILEGED"),
    (CP_AHB_BUFFERABLE = 4, "CP_AHB_BUFFERABLE"),
    (CP_AHB_CACHEABLE = 8, "CP_AHB_CACHEABLE"),
    (CP_AHB_PROT_DEFAULT = 3, "CP_AHB_PROT_DEFAULT"));

CODASIP_ENUM_CLASS_STR(AXIValidCode,
    (CP_AXI_INVALID = 0, "CP_AXI_INVALID"),
    (CP_AXI_VALID = 1, "CP_AXI_VALID"));

CODASIP_ENUM_CLASS_STR(AXIReadyCode,
    (CP_AXI_WAIT = 0, "CP_AXI_WAIT"),
    (CP_AXI_READY = 1, "CP_AXI_READY"));

CODASIP_ENUM_CLASS_STR(AXIProtFlags,
    (CP_AXI_PROT_NONE = 0, "CP_AXI_PROT_NONE"),
    (CP_AXI_PROT_PRIVILEGED = 1, "CP_AXI_PROT_PRIVILEGED"),
    (CP_AXI_PROT_NON_SECURE = 2, "CP_AXI_PROT_NON_SECURE"),
    (CP_AXI_PROT_INSTR = 4, "CP_AXI_PROT_INSTR"));

CODASIP_ENUM_CLASS_STR(AXIResponseCode,
    (CP_AXI_OKAY = 0, "CP_AXI_OKAY"),
    (CP_AXI_EXOKAY = 1, "CP_AXI_EXOKAY"),
    (CP_AXI_SLVERR = 2, "CP_AXI_SLVERR"),
    (CP_AXI_DECERR = 3, "CP_AXI_DECERR"));

CODASIP_ENUM_CLASS_STR(AXISizeCode,
    (CP_AXI_SIZE_8 = 0, "CP_AXI_SIZE_8"),
    (CP_AXI_SIZE_16 = 1, "CP_AXI_SIZE_16"),
    (CP_AXI_SIZE_32 = 2, "CP_AXI_SIZE_32"),
    (CP_AXI_SIZE_64 = 3, "CP_AXI_SIZE_64"),
    (CP_AXI_SIZE_128 = 4, "CP_AXI_SIZE_128"),
    (CP_AXI_SIZE_256 = 5, "CP_AXI_SIZE_256"),
    (CP_AXI_SIZE_512 = 6, "CP_AXI_SIZE_512"),
    (CP_AXI_SIZE_1024 = 7, "CP_AXI_SIZE_1024"));

CODASIP_ENUM_CLASS_STR(AXIBurstCode,
    (CP_AXI_FIXED = 0, "CP_AXI_FIXED"),
    (CP_AXI_INCR = 1, "CP_AXI_INCR"),
    (CP_AXI_WRAP = 2, "CP_AXI_WRAP"));

CODASIP_ENUM_CLASS_STR(CPBValidCode,
    (CP_CPB_VALID = 1, "CP_CPB_VALID"),
    (CP_CPB_INVALID = 0, "CP_CPB_INVALID"));

CODASIP_ENUM_CLASS_STR(CPBReadyCode,
    (CP_CPB_READY = 1, "CP_CPB_READY"),
    (CP_CPB_WAIT = 0, "CP_CPB_WAIT"));

CODASIP_ENUM_CLASS_STR(CPBResponseCode,
    (CP_CPB_OKAY = 0, "CP_CPB_OKAY"),
    (CP_CPB_ERROR = 1, "CP_CPB_ERROR"));

CODASIP_ENUM_CLASS_STR(CPBReadWriteCode,
    (CP_CPB_READ = 0, "CP_CPB_READ"),
    (CP_CPB_WRITE = 1, "CP_CPB_WRITE"));

CODASIP_ENUM_CLASS_STR(CPBSizeCode,
    (CP_CPB_BYTES_1 = 0, "CP_CPB_BYTES_1"),
    (CP_CPB_BYTES_2 = 1, "CP_CPB_BYTES_2"),
    (CP_CPB_BYTES_4 = 2, "CP_CPB_BYTES_4"),
    (CP_CPB_BYTES_8 = 3, "CP_CPB_BYTES_8"),
    (CP_CPB_BYTES_16 = 4, "CP_CPB_BYTES_16"),
    (CP_CPB_BYTES_32 = 5, "CP_CPB_BYTES_32"),
    (CP_CPB_BYTES_64 = 6, "CP_CPB_BYTES_64"),
    (CP_CPB_BYTES_128 = 7, "CP_CPB_BYTES_128"),
    (CP_CPB_BYTES_256 = 8, "CP_CPB_BYTES_256"));

CODASIP_ENUM_CLASS_STR(TraceJumpTypeCode,
    (CP_JUMP_NONE = 0, "CP_JUMP_NONE"),
    (CP_JUMP_DIRECT = 2, "CP_JUMP_DIRECT"),
    (CP_JUMP_INDIRECT = 3, "CP_JUMP_INDIRECT"));

CODASIP_ENUM_CLASS_STR(DebugModuleType,
    (DEBUG_MODULE_NEXUS = 0, "NEXUS"),
    (DEBUG_MODULE_RISC_V = 1, "RISC_V"));

CODASIP_ENUM_CLASS_STR(FPUExceptions,
    (CODASIP_FPU_INVALID = 1, "CODASIP_FPU_INVALID"),
    (CODASIP_FPU_DIVBYZERO = 2, "CODASIP_FPU_DIVBYZERO"),
    (CODASIP_FPU_OVERFLOW = 4, "CODASIP_FPU_OVERFLOW"),
    (CODASIP_FPU_UNDERFLOW = 8, "CODASIP_FPU_UNDERFLOW"),
    (CODASIP_FPU_INEXACT = 16, "CODASIP_FPU_INEXACT"),
    (CODASIP_FPU_ALL_EXCEPT = 31, "CODASIP_FPU_ALL_EXCEPT"));

CODASIP_ENUM_CLASS_STR_DEFAULT(AttributeBase, ATTRIBUTE_BASE_UNDEF,
    (ATTRIBUTE_BASE_UNDEF = 0, "UNDEF"),
    (ATTRIBUTE_BASE_BINARY = 1, "binary"),
    (ATTRIBUTE_BASE_OCTAL = 2, "octal"),
    (ATTRIBUTE_BASE_DECIMAL = 3, "decimal"),
    (ATTRIBUTE_BASE_HEXADECIMAL = 4, "hexadecimal"),
    (ATTRIBUTE_BASE_USER = 5, "user_*"));

CODASIP_ENUM_CLASS_STR(PropertySynthesisValue,
    (PROPERTY_SYNTHESIS_RETIME = 0, "RETIME"),
    (PROPERTY_SYNTHESIS_UNGROUP = 1, "UNGROUP"),
    (PROPERTY_SYNTHESIS_FLATTEN = 2, "FLATTEN"));

const std::string ASMC_ALIGN_BALIGN = "BALIGN";
const std::string ASMC_ALIGN_P2ALIGN = "P2ALIGN";

}   // namespace codasip

#endif // ERR_CODAL_CONSTANTS_H_
